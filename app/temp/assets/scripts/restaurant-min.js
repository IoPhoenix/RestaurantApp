"use strict";!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,r){var o,a=new Promise(function(a,s){e(o=t[n].apply(t,r)).then(a,s)});return a.request=o,a}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return t(this[n],o,arguments)})})}function o(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function a(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[n],(r=t(e,o,arguments)).then(function(e){if(e)return new i(e,r.request)});var e,r})})}function s(e){this._index=e}function i(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function u(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new l(n)}function d(e){this._db=e}n(s,"_index",["name","keyPath","multiEntry","unique"]),r(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(i,"_cursor",["direction","key","primaryKey","value"]),r(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(i.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(e){if(e)return new i(e,n._request)})})})}),c.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(c,"_store",["name","keyPath","indexNames","autoIncrement"]),r(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(c,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},n(l,"_tx",["objectStoreNames","mode"]),o(l,"_tx",IDBTransaction,["abort"]),u.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},n(u,"_db",["name","version","objectStoreNames"]),o(u,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},n(d,"_db",["name","version","objectStoreNames"]),o(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,a=o[e].apply(o,n.slice(0,-1));a.onsuccess=function(){r(a.result)}})})}),[s,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var p={open:function(e,n,r){var o=t(indexedDB,"open",[e,n]),a=o.request;return a&&(a.onupgradeneeded=function(e){r&&r(new u(a.result,e.oldVersion,a.transaction))}),o.then(function(e){return new d(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=p,module.exports.default=module.exports):self.idb=p}(),"serviceWorker"in navigator&&navigator.serviceWorker.register("./service-worker.js").then(()=>console.log("Service Worker Registered")).catch(e=>console.log("ServiceWorker registration failed: ",e));class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static dbPromise(){return idb.open("db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id")}})}static async fetchRestaurants(e){try{const t=await fetch(`${DBHelper.DATABASE_URL}restaurants`),n=await t.json();e(null,n),this.dbPromise().then(console.log("Database created!")).then(e=>{const t=e.transaction("restaurants","readwrite"),r=t.objectStore("restaurants");return n.forEach(e=>r.put(e)),t.cemplete.then(()=>Promise.resolve(n))}).then(console.log("Added restaurants info to idb!")).catch(e=>console.log("Could not add restaurants to idb: ",e))}catch(t){console.log("Error with the network, you are offline"),this.dbPromise().then(e=>{if(!e)return;return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(t=>{console.log("Data read from idb while offline: ",t),e(null,t)}).catch(t=>e(t,null))}}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`assets/images/${e.id}_thumbnail.webp`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(self.newMap),n}static updateFavoriteStatus(e,t){console.log("Updating status to: ",t),fetch(`${DBHelper.DATABASE_URL}restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{console.log("favorite status changed in database!"),this.dbPromise().then(n=>{const r=n.transaction("restaurants","readwrite").objectStore("restaurants");r.get(e).then(e=>{e.is_favorite=t,r.put(e)}).then(console.log("Favorite status updated in IndexedDB")).catch(e=>console.log("Could not get requested restaurant from IndexedDB: ",e))})}).catch(e=>console.log("Error updating favorite restaurant in database: ",e))}static getStoredObjectById(e,t,n){return this.dbPromise().then(r=>{if(!r)return;return r.transaction(e).objectStore(e).index(t).getAll(n)})}static async fetchReviewsByRestaurantId(e){try{const t=await fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`),n=await t.json();return this.dbPromise().then(e=>{if(!e)return;const t=e.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(n)?n.forEach(e=>t.put(e)):t.put(n)}).then(console.log("Added reviews info to idb!")).catch(e=>console.log("Could not add reviews to idb: ",e)),Promise.resolve(n)}catch(t){return DBHelper.getStoredObjectById("reviews","restaurant",e).then(e=>(console.log("looking for offline stored reviews"),Promise.resolve(e)))}}static addReview(e){document.getElementById("form-error").innerText="";const t={name:"addReview",data:e,objectType:"review"};if(!navigator.onLine&&"addReview"===t.name)return void DBHelper.sendDataWhenOnline(t);const n={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:parseInt(e.restaurant_id)};console.log("Sending review: ",n);const r={method:"POST",body:JSON.stringify(n),headers:new Headers({"Content-Type":"application/json"})};fetch(`${DBHelper.DATABASE_URL}reviews`,r).then(e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():"API call successfull"}).then(e=>console.log("Review was successfully sent to server!")).catch(e=>console.log(e))}static sendDataWhenOnline(e){console.log("Object to store: ",e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local storage: ${e.objectType} is stored!`),window.addEventListener("online",t=>{console.log("Browser: online again!");const n=JSON.parse(localStorage.getItem("data"));console.log("Updating and cleaning ui..."),[...document.querySelectorAll(".review-offline")].forEach(e=>{e.classList.remove("review-offline"),e.querySelector(".offline-label").remove()}),null!==n&&(console.log("From sendDataWhenOnline, data is: ",n),"addReview"===e.name&&DBHelper.addReview(e.data),console.log("Review from local storage sent to server"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.objectType} removed!`))})}}let restaurant;var newMap;document.addEventListener("DOMContentLoaded",e=>{initMap()});const initMap=()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiaW9waG9lbml4IiwiYSI6ImNqa29peG82NzFtZHkzcXBjdm9mbmN2ZWkifQ.80oAZqBb8GPBVoI8xFZucA",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})},fetchRestaurantFromURL=e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))},fillRestaurantHTML=(e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-image"),n=document.getElementById("restaurant-caption"),r=`<source media="(min-width: 992px)" srcset="assets/images/${e.id}_large_2x.webp 2x, assets/images/${e.id}_large_1x.webp">\n              <source media="(min-width: 768px)" srcset="assets/images/${e.id}_medium.webp 445w">\n              <source media="(min-width: 480px)" srcset="assets/images/${e.id}_small.webp 540w">\n              <img class="restaurant-img" id="restaurant-img" src="assets/images/${e.id}_extra-small.webp" alt="Photo of ${e.name} restaurant">`;t.innerHTML=r,n.innerHTML=`Photo of ${e.name}`,document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviewsByRestaurantId(e.id).then(function(e){fillReviewsHTML(e)})},fillRestaurantHoursHTML=(e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);const a=document.createElement("td");a.innerHTML=e[n],r.appendChild(a),t.appendChild(r)}},fillReviewsHTML=e=>{const t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)},createReviewHTML=e=>{const t=document.createElement("li"),n=document.createElement("h3");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("em");r.innerHTML=new Date(e.createdAt).toLocaleString(),t.appendChild(r);const o=document.createElement("p");o.classList.add("restaurant-rating"),o.innerHTML=`Rating: ${e.rating}`,t.appendChild(o);const a=document.createElement("p");return a.innerHTML=e.comments,t.appendChild(a),t},addNewReviewHtml=e=>{const t=createReviewHTML(e);if(!navigator.onLine){const e=document.createElement("div");e.classList.add("offline-label"),e.innerHTML="Offline",t.classList.add("review-offline"),t.appendChild(e)}document.getElementById("reviews-list").appendChild(t)},fillBreadcrumb=(e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li"),r=document.createElement("a");r.innerHTML=e.name,r.href=window.location.href,r.classList.add("active-page"),n.appendChild(r),t.appendChild(n)},getParameterByName=(e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null},addReview=()=>{console.log("Form is submitted!"),event.preventDefault();let e=getParameterByName("id"),t=document.getElementById("review-author").value,n=document.getElementById("review-comments").value,r=document.querySelector("#select-rating option:checked").value;if(!(t&&n))return void(document.getElementById("form-error").innerText="Please fill in the form!");const o=[t,e,r,n],a={restaurant_id:parseInt([o[1]]),rating:parseInt(o[2]),name:o[0].trim(),comments:o[3].trim().substring(0,300),createdAt:new Date};console.log("From addReview, validatedReview is: ",a),DBHelper.addReview(a),addNewReviewHtml(a),document.getElementById("review-form").reset()},menuToggler=document.getElementById("menu-toggler");let isMenuOpen=!1;menuToggler.addEventListener("click",()=>{isMenuOpen=!isMenuOpen,menuToggler.setAttribute("aria-expanded",isMenuOpen)});