"use strict";!function(){function e(e){return new Promise(function(t,r){e.onsuccess=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function t(t,r,n){var o,s=new Promise(function(s,a){e(o=t[r].apply(t,n)).then(s,a)});return s.request=o,s}function r(e,t,r){r.forEach(function(r){Object.defineProperty(e.prototype,r,{get:function(){return this[t][r]},set:function(e){this[t][r]=e}})})}function n(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return t(this[r],o,arguments)})})}function o(e,t,r,n){n.forEach(function(n){n in r.prototype&&(e.prototype[n]=function(){return this[t][n].apply(this[t],arguments)})})}function s(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return e=this[r],(n=t(e,o,arguments)).then(function(e){if(e)return new i(e,n.request)});var e,n})})}function a(e){this._index=e}function i(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,r){e.oncomplete=function(){t()},e.onerror=function(){r(e.error)},e.onabort=function(){r(e.error)}})}function u(e,t,r){this._db=e,this.oldVersion=t,this.transaction=new l(r)}function d(e){this._db=e}r(a,"_index",["name","keyPath","multiEntry","unique"]),n(a,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),s(a,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(i,"_cursor",["direction","key","primaryKey","value"]),n(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(i.prototype[t]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[t].apply(r._cursor,n),e(r._request).then(function(e){if(e)return new i(e,r._request)})})})}),c.prototype.createIndex=function(){return new a(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new a(this._store.index.apply(this._store,arguments))},r(c,"_store",["name","keyPath","indexNames","autoIncrement"]),n(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),s(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(c,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},r(l,"_tx",["objectStoreNames","mode"]),o(l,"_tx",IDBTransaction,["abort"]),u.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},r(u,"_db",["name","version","objectStoreNames"]),o(u,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},r(d,"_db",["name","version","objectStoreNames"]),o(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,a].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,r=(t=arguments,Array.prototype.slice.call(t)),n=r[r.length-1],o=this._store||this._index,s=o[e].apply(o,r.slice(0,-1));s.onsuccess=function(){n(s.result)}})})}),[a,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var r=this,n=[];return new Promise(function(o){r.iterateCursor(e,function(e){e?(n.push(e.value),void 0===t||n.length!=t?e.continue():o(n)):o(n)})})})});var f={open:function(e,r,n){var o=t(indexedDB,"open",[e,r]),s=o.request;return s&&(s.onupgradeneeded=function(e){n&&n(new u(s.result,e.oldVersion,s.transaction))}),o.then(function(e){return new d(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=f,module.exports.default=module.exports):self.idb=f}(),"serviceWorker"in navigator&&navigator.serviceWorker.register("./service-worker.js").then(()=>console.log("Service Worker Registered")).catch(e=>console.log("ServiceWorker registration failed: ",e));class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static dbPromise(){return idb.open("db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id")}})}static async fetchRestaurants(e){try{const t=await fetch(`${DBHelper.DATABASE_URL}restaurants`),r=await t.json();e(null,r),this.dbPromise().then(e=>{const t=e.transaction("restaurants","readwrite"),n=t.objectStore("restaurants");return r.forEach(e=>n.put(e)),t.cemplete.then(()=>Promise.resolve(r))}).catch(e=>console.log("Could not add restaurants to idb: ",e))}catch(t){console.log("Error with the network, you are offline"),this.dbPromise().then(e=>{if(!e)return;return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(t=>{console.log("Data read from idb while offline: ",t),e(null,t)}).catch(t=>e(t,null))}}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,o)=>{if(n)r(n,null);else{let n=o;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`assets/images/${e.id}_thumbnail.webp`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(self.newMap),r}static updateFavoriteStatus(e,t){console.log("Updating status to: ",t),fetch(`${DBHelper.DATABASE_URL}restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{console.log("favorite status changed in database!"),this.dbPromise().then(r=>{const n=r.transaction("restaurants","readwrite").objectStore("restaurants");n.get(e).then(e=>{e.is_favorite=t,n.put(e)}).then(console.log("Favorite status updated in IndexedDB")).catch(e=>console.log("Could not get requested restaurant from IndexedDB: ",e))})}).catch(e=>console.log("Error updating favorite restaurant in database: ",e))}static getStoredObjectById(e,t,r){return this.dbPromise().then(n=>{if(!n)return;return n.transaction(e).objectStore(e).index(t).getAll(r)})}static async fetchReviewsByRestaurantId(e){try{const t=await fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`),r=await t.json();return this.dbPromise().then(e=>{if(!e)return;const t=e.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(r)?r.forEach(e=>t.put(e)):t.put(r)}).catch(e=>console.log("Could not add reviews to idb: ",e)),Promise.resolve(r)}catch(t){return DBHelper.getStoredObjectById("reviews","restaurant",e).then(e=>(console.log("looking for offline stored reviews"),Promise.resolve(e)))}}static addReview(e){document.getElementById("form-error").innerText="";const t={name:"addReview",data:e,objectType:"review"};if(!navigator.onLine&&"addReview"===t.name)return void DBHelper.sendDataWhenOnline(t);const r={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:parseInt(e.restaurant_id)};console.log("Sending review: ",r);const n={method:"POST",body:JSON.stringify(r),headers:new Headers({"Content-Type":"application/json"})};fetch(`${DBHelper.DATABASE_URL}reviews`,n).then(e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():"API call successfull"}).then(e=>console.log("Review was successfully sent to server!")).catch(e=>console.log(e))}static sendDataWhenOnline(e){console.log("Object to store: ",e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local storage: ${e.objectType} is stored!`),window.addEventListener("online",t=>{console.log("Browser: online again!");const r=JSON.parse(localStorage.getItem("data"));console.log("Updating and cleaning ui..."),[...document.querySelectorAll(".review-offline")].forEach(e=>{e.classList.remove("review-offline"),e.querySelector(".offline-label").remove()}),null!==r&&(console.log("From sendDataWhenOnline, data is: ",r),"addReview"===e.name&&DBHelper.addReview(e.data),console.log("Review from local storage sent to server"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.objectType} removed!`))})}}let restaurants,neighborhoods,cuisines,newMap,markers=[];document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines()});const fetchNeighborhoods=()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})},fetchCuisines=()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})},initMap=()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.jpg70?access_token=pk.eyJ1IjoiaW9waG9lbml4IiwiYSI6ImNqa29peG82NzFtZHkzcXBjdm9mbmN2ZWkifQ.80oAZqBb8GPBVoI8xFZucA",{mapboxToken:"pk.eyJ1IjoiaW9waG9lbml4IiwiYSI6ImNqa29peG82NzFtZHkzcXBjdm9mbmN2ZWkifQ.80oAZqBb8GPBVoI8xFZucA",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(self.newMap),updateRestaurants()},updateRestaurants=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,n=t.selectedIndex,o=e[r].value,s=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})},resetRestaurants=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e},fillRestaurantsHTML=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()},createRestaurantHTML=e=>{const t=document.createElement("li"),r=document.createElement("div");r.className="image-box";const n=document.createElement("img");n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e),n.setAttribute("alt",`Photo of ${e.name} restaurant`),r.append(n);const o=document.createElement("button");o.innerHTML="❤",o.classList.add("favorite-button"),o.addEventListener("click",()=>{"false"===e.is_favorite?e.is_favorite=!1:"true"===e.is_favorite&&(e.is_favorite=!0);const t=!e.is_favorite;DBHelper.updateFavoriteStatus(e.id,t),e.is_favorite=!e.is_favorite,changeFavoriteElementClass(o,e.is_favorite)}),changeFavoriteElementClass(o,e.is_favorite),r.append(o),t.append(r);const s=document.createElement("h3");s.innerHTML=e.name,t.append(s);const a=document.createElement("address");a.innerHTML=e.neighborhood,t.append(a);const i=document.createElement("address");i.innerHTML=e.address,t.append(i);const c=document.createElement("button");return c.innerHTML="View Restaurant Details",c.addEventListener("click",()=>window.location.href=DBHelper.urlForRestaurant(e)),t.append(c),t},addMarkersToMap=(e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})},changeFavoriteElementClass=(e,t)=>{"boolean"==typeof t?t?(e.classList.remove("is-not-favorite"),e.classList.add("is-favorite"),e.setAttribute("aria-label","remove as favorite")):(e.classList.remove("is-favorite"),e.classList.add("is-not-favorite"),e.setAttribute("aria-label","mark as favorite")):"string"==typeof t&&("false"===t?(e.classList.remove("is-favorite"),e.classList.add("is-not-favorite"),e.setAttribute("aria-label","mark as favorite")):(e.classList.remove("is-not-favorite"),e.classList.add("is-favorite"),e.setAttribute("aria-label","remove as favorite")))};